#cloud-config
# vim: syntax=yaml
#
# ***********************
# 	---- for more examples look at: ------
# ---> https://cloudinit.readthedocs.io/en/latest/topics/examples.html
# ******************************
#
# This is the configuration syntax that the write_files module
# will know how to understand. encoding can be given b64 or gzip or (gz+b64).
# The content will be decoded accordingly and then written to the path that is
# provided.
#
bootcmd:
  # host ssh keys should be created on next boot
  - rm -f /etc/ssh/*_key*
  # recreate for this image if ssh was installed
  - ssh-keygen -A
  # unique machine id need to be recreated 
  - rm -f /etc/machine-id
  - rm -f /var/lib/dbus/machine-id
  - systemd-machine-id-setup

write_files:
- path: /etc/hosts
  content: |
      127.0.0.1 localhost
      127.0.1.1 ${hostname}.${domain} ${hostname}
- path: /etc/systemd/network/97-lan.link
  content: |
      [Link]
      MACAddressPolicy = persistent
      Name = ${interface_name}
      WakeOnLan = magic
      [Match]
      MACAddress = ${mac_address}
- path: /etc/systemd/network/97-lan.network
  content: |
      [Match]
      MACAddress = ${mac_address}
      [Network]
      Address = ${ip_address}
      DHCP = no
      DNS = ${dns_address}
      Domains = ${domain}
      Gateway = ${ip_address_gateway}
      LinkLocalAddressing = no
- path: /etc/systemd/network/98-disable-dhcp.network
  content: |
      [Match]
      Name = en* eth* veth*
      [Network]
      DHCP = no


users:
  - name: provision
    ssh_authorized_keys:
      - ${ssh_public_key}

chpasswd:
  expire: true
  list: |
      provision:$6$rounds=100000$Nx1h0JsPD7iwzVJi$oWpXDUfQ8a3g9k/G05MbDvAPK7Bc9iJLS31sjBc9/e3A/r6VW/3Bz5TJNyA1rvyUuxLm27RNXP.NTic1TtQdc0

hostname: "${hostname}"
timezone: "Europe/Berlin"
# disable_root: True
# ssh_pwauth: False


runcmd:
  - touch /etc/cloud/cloud-init.disabled
  - update-initramfs -u
  - lsblk
  - |
      bash -s <<'EOF'
      set -x
      let count=1
      parted_output=$(parted -ml)
      while read device; do
        echo "$parted_output" | grep "$device" | grep -v "unknown" && continue
        pvs -tq "$device" && continue
        pvcreate "$device"
        vgcreate vg_data "$device"
        if (($count == 1)); then
          lvcreate -L 10G -n lv_data$${count} vg_data
          lvcreate -l 100%FREE -n lv_docker vg_data
          mkfs.ext4 /dev/mapper/vg_data-lv_data$${count}
          mkfs.ext4 /dev/mapper/vg_data-lv_docker
          mount /dev/mapper/vg_data-lv_docker /mnt
          rsync -a /var/lib/docker /mnt/
          mkdir -p /data/$${count}
          echo "/dev/mapper/vg_data-lv_data$${count} /data/$${count}            ext4    defaults        0       2" >> /etc/fstab
          echo "/dev/mapper/vg_data-lv_docker /var/lib/docker ext4    defaults        0       2" >> /etc/fstab
        else
          lvcreate -l 100%FREE -n lv_data$${count} vg_data
          mkfs.ext4 /dev/mapper/vg_data-lv_data$${count}
          mkdir -p /data/$${count}
          echo "/dev/mapper/vg_data-lv_data$${count} /data/$${count}            ext4    defaults        0       2" >> /etc/fstab
        fi
        let count+=1
      done < <(find /dev/ -maxdepth 1 -name 'vd?' -or -name 'sd?')
      EOF
      

power_state:
  mode: reboot
